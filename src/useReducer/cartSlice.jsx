import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

// üîπ URL —Å–µ—Ä–≤–µ—Ä–∞ JSON
const API_URL = "http://localhost:5000";

// üîπ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
export const fetchCart = createAsyncThunk("cart/fetchCart", async () => {
    const response = await fetch(`${API_URL}/cart`);
    return response.json();
});

// üîπ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
export const addToCartAsync = createAsyncThunk("cart/addToCart", async (product) => {
    const response = await fetch(`${API_URL}/cart`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ ...product, quantity: 1 })
    });
    return response.json();
});

// üîπ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
export const removeFromCartAsync = createAsyncThunk("cart/removeFromCart", async (id) => {
    await fetch(`${API_URL}/cart/${id}`, { method: "DELETE" });
    return id;
});

// üîπ –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
export const clearCartAsync = createAsyncThunk("cart/clearCart", async () => {
    await fetch(`${API_URL}/cart`, { method: "DELETE" });
    return [];
});

// üîπ Slice
const cartSlice = createSlice({
    name: "cart",
    initialState: {
        products: [], // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–¥—É–∫—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞
        cart: [],
        status: "idle", // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏
        error: null
    },
    reducers: {},
    extraReducers: (builder) => {
        builder
            .addCase(fetchCart.fulfilled, (state, action) => {
                state.cart = action.payload;
            })
            .addCase(addToCartAsync.fulfilled, (state, action) => {
                state.cart.push(action.payload);
            })
            .addCase(removeFromCartAsync.fulfilled, (state, action) => {
                state.cart = state.cart.filter(item => item.id !== action.payload);
            })
            .addCase(clearCartAsync.fulfilled, (state) => {
                state.cart = [];
            })
            .addCase(fetchCart.rejected, (state, action) => {
                state.error = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã";
            });
    }
});

export default cartSlice.reducer;
